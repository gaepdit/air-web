@page "{id:int?}"
@using AirWeb.AppServices.Compliance.WorkEntries.Search
@using AirWeb.AppServices.Enforcement.EnforcementActionQuery
@using AirWeb.AppServices.Enforcement.Permissions
@using AirWeb.AppServices.Permissions.ComplianceStaff
@using AirWeb.AppServices.Utilities
@using AirWeb.Domain.EnforcementEntities.EnforcementActions
@using AirWeb.WebApp.Pages.Shared.DisplayTemplates
@using AirWeb.WebApp.Pages.Shared.EditorTemplates
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model DetailsModel
@{
    var caseFile = Model.CaseFile!;
    ViewData["Title"] = $"Enforcement Case #{Model.Id} – Facility {caseFile.FacilityId}";
}
<script>
    let today = new Date();
    let todayHtmlString = [today.getFullYear(), ('0' + (today.getMonth() + 1)).slice(-2), ('0' + today.getDate()).slice(-2)].join('-');
</script>
@if (caseFile.IsDeleted)
{
    <div class="callout callout-danger mb-3">
        <div class="container-full">
            <div class="row justify-content-between align-items-center g-0 my-1">
                <div class="col">
                    <h2 class="h4 text-danger-emphasis">This Enforcement Case has been deleted.</h2>
                </div>
                @if (Model.UserCan[EnforcementOperation.Restore])
                {
                    <div class="col-auto d-print-none ms-2">
                        <a asp-page="Restore" asp-route-id="@Model.Id" class="btn btn-outline-warning">
                            Restore deleted enforcement
                        </a>
                    </div>
                }
            </div>
        </div>
        <p>
            Deleted by @Html.DisplayFor(_ => caseFile.DeletedBy, DisplayTemplate.NameOrPlaceholder)
            on @Html.DisplayFor(_ => caseFile.DeletedAt, DisplayTemplate.LongDateTimeOffsetNullable)
        </p>
        <h3 class="h5">Comments</h3>
        @Html.DisplayFor(_ => caseFile.DeleteComments, DisplayTemplate.TextWithLinebreaks)
    </div>
}

<div class="row justify-content-between align-items-center mb-2">
    <div class="col-md">
        <h1 class="mb-md-0">Enforcement Case File</h1>
    </div>
    @if (!caseFile.IsDeleted)
    {
        <div class="col-md-auto ms-md-3 d-print-none">
            <div class="btn-group">
                @if (Model.UserCan[EnforcementOperation.Close])
                {
                    <a asp-page="Close" asp-route-id="@Model.Id.ToString()" class="btn btn-outline-primary">Close</a>
                }
                @if (Model.UserCan[EnforcementOperation.Reopen])
                {
                    <a asp-page="Reopen" asp-route-id="@Model.Id.ToString()" class="btn btn-outline-primary">Reopen</a>
                }
                @if (Model.UserCan[EnforcementOperation.Edit])
                {
                    <a asp-page="Edit" asp-route-id="@Model.Id.ToString()" class="btn btn-outline-primary">Edit</a>
                }
            </div>
        </div>
    }
</div>

<div class=" lead">Enforcement Tracking #@Model.Id.ToString()</div>

@if (caseFile.AttentionNeeded)
{
    <div class="callout callout-warning p-3">
        <p><strong>Attention needed:</strong>
            This enforcement case requires
            @if (caseFile.LacksLinkedCompliance)
            {
                @:a linked <a href="#discovery-events">discovery event</a>
            }
            @if (caseFile is { LacksLinkedCompliance: true, LacksPollutantsOrPrograms: true })
            {
                @:and
            }
            @if (caseFile.LacksPollutantsOrPrograms)
            {
                @:associated <a href="#pollutants-programs">pollutants and programs</a>
            }
            .
        </p>
    </div>
}

<section class="mt-3">
    <h2 class="visually-hidden">Details</h2>
    <dl class="row mb-2">
        <dt class="col-sm-4 col-lg-3">Status</dt>
        <dd class="col-sm-8 col-lg-9">
            <div class="rounded-1 py-1 px-2 ms-n2 @(caseFile.CaseStatusClass)">@caseFile.CaseFileStatus.GetDescription()</div>
            @if (caseFile.IsClosed)
            {
                <div class="mt-1">
                    Closed by @Html.DisplayFor(_ => caseFile.ClosedBy, DisplayTemplate.NameOrPlaceholder)
                    on @Html.DisplayFor(_ => caseFile.ClosedDate, DisplayTemplate.ShortDateOnlyNullable)
                </div>
            }
        </dd>
        <dt class="col-sm-4 col-lg-3">Facility</dt>
        <dd class="col-sm-8 col-lg-9">
            <partial name="Shared/FacilityPartials/_FacilityAirsNameLink"
                     model="(caseFile.FacilityId, caseFile.FacilityName)" />
        </dd>
        <dt class="col-sm-4 col-lg-3">@Html.DisplayNameFor(_ => caseFile.ResponsibleStaff)</dt>
        <dd class="col-sm-8 col-lg-9">@Html.DisplayFor(_ => caseFile.ResponsibleStaff, DisplayTemplate.NameOrPlaceholder)</dd>
        <dt class="col-sm-4 col-lg-3">@Html.DisplayNameFor(_ => caseFile.DiscoveryDate)</dt>
        <dd class="col-sm-8 col-lg-9">@Html.DisplayFor(_ => caseFile.DiscoveryDate, DisplayTemplate.ShortDateOnlyNullable)</dd>
        @if (caseFile.HasReportableEnforcement)
        {
            <dt class="col-sm-4 col-lg-3">@Html.DisplayNameFor(_ => caseFile.DayZero)</dt>
            <dd class="col-sm-8 col-lg-9">@Html.DisplayFor(_ => caseFile.DayZero, DisplayTemplate.ShortDateOnlyNullable)</dd>
            <dt class="col-sm-4 col-lg-3">@Html.DisplayNameFor(_ => caseFile.ViolationType)</dt>
            <dd class="col-sm-8 col-lg-9">@Html.DisplayFor(_ => caseFile.ViolationType)</dd>
        }
        <dt class="mb-2">@Html.DisplayNameFor(_ => caseFile.Notes)</dt>
        <dd>
            <div class="border rounded p-3">@Html.DisplayFor(_ => caseFile.Notes, DisplayTemplate.TextWithLinebreaks, new { Placeholder = "[None]" })</div>
        </dd>
    </dl>

    <details class="border rounded-1" open="@(caseFile.AttentionNeeded)">
        <summary class="bg-body-secondary px-2 py-1">
            Related Details
        </summary>
        <div class="container mt-2">
            <section class="mt-3">
                <div class="row justify-content-between align-items-baseline g-0">
                    <h3 class="h5 col-md" id="discovery-events">Linked Discovery Events</h3>
                    @if (Model.UserCan[EnforcementOperation.Edit])
                    {
                        <div class="col-md-auto d-print-none ms-md-3 mb-1 ">
                            <a asp-page="LinkedEvents" asp-route-id="@Model.Id" class="btn btn-sm btn-outline-primary">
                                Edit Linked Events
                            </a>
                        </div>
                    }
                </div>
                @if (!caseFile.ComplianceEvents.Any())
                {
                    <p>
                        <em>None.</em>
                    </p>
                }
                else
                {
                    <partial name="Shared/CompliancePartials/_WorkEntrySearchTable"
                             model="(caseFile.ComplianceEvents, (WorkEntrySearchDto?)null)" />
                }
            </section>

            @if (caseFile.WillHaveReportableEnforcement)
            {
                <section class="mt-3">
                    <div class="row justify-content-between align-items-baseline g-0">
                        <h3 class="h5 col-md" id="pollutants-programs">Associated Pollutants & Air Programs</h3>
                        @if (Model.UserCan[EnforcementOperation.Edit])
                        {
                            <div class="col-md-auto d-print-none ms-md-3 mb-1 ">
                                <a asp-page="PollutantsPrograms" asp-route-id="@Model.Id" class="btn btn-sm btn-outline-primary">
                                    Edit Pollutants & Programs
                                </a>
                            </div>
                        }
                    </div>
                    <dl>
                        <dt>@Html.DisplayNameFor(_ => caseFile.Pollutants)</dt>
                        <dd>
                            <partial name="Facility/_Partials/_Pollutants" model="caseFile.Pollutants" />
                        </dd>
                        <dt>@Html.DisplayNameFor(_ => caseFile.AirPrograms)</dt>
                        <dd>
                            @Html.DisplayFor(_ => caseFile.AirProgramsAsStrings, DisplayTemplate.StringListOrPlaceholder)
                        </dd>
                    </dl>
                </section>
            }
        </div>
    </details>
</section>

<section class="mt-4">
    <div class="row justify-content-between align-items-start mb-3">
        <div class="col-md">
            <h2 class="h3 mb-md-0">Enforcement Actions</h2>
        </div>

        @if (Model.UserCan[EnforcementOperation.Edit])
        {
            <div class="col-md-auto ms-md-3 d-print-none">
                <button class="btn btn-sm btn-outline-primary dropdown-toggle icon-link" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <svg class="bi">
                        <use href="@Url.Content("~/images/app-icons.svg")#app-icon-plus-lg"></use>
                    </svg>
                    Enforcement Action
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <button class="dropdown-item" type="button" name="newEnforcementAction" value="LetterOfNoncompliance">Letter of Noncompliance</button>
                    </li>
                    <li>
                        <button class="dropdown-item" type="button" name="newEnforcementAction" value="NoticeOfViolation">Notice of Violation</button>
                    </li>
                    <li>
                        <button class="dropdown-item" type="button" name="newEnforcementAction" value="NoFurtherActionLetter">No Further Action Letter</button>
                    </li>
                    <li>
                        <button class="dropdown-item" type="button" name="newEnforcementAction" value="NovNfaLetter">Combined NOV/NFA Letter</button>
                    </li>
                    <li>
                        <button class="dropdown-item" type="button" name="newEnforcementAction" value="ProposedConsentOrder">Proposed Consent Order</button>
                    </li>
                    <li>
                        <a asp-page="Add/ConsentOrder" asp-route-id="@Model.Id" class="dropdown-item">Consent Order</a>
                    </li>
                    <li>
                        <a asp-page="Add/AdministrativeOrder" asp-route-id="@Model.Id" class="dropdown-item">Administrative Order</a>
                    </li>
                    <li>
                        <button class="dropdown-item" type="button" name="newEnforcementAction" value="InformationalLetter">Informational Letter</button>
                    </li>
                </ul>
            </div>

            // Modal form for creating a new enforcement action. 
            <div class="modal fade" id="addEnforcementModal" tabindex="-1" aria-labelledby="addEnforcementModalLabel" aria-modal="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="addEnforcementModalLabel">Add
                                <span id="addEnforcementLabel"></span></h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <form method="post" asp-page-handler="AddEnforcementAction" id="AddEnforcementActionForm">
                            <div class="modal-body">
                                @Html.EditorFor(m => m.CreateEnforcementAction.Comment, EditorTemplate.Textarea, new { Rows = 4 })
                                <div class="mt-2">
                                    @Html.EditorFor(m => m.CreateEnforcementAction.ResponseRequested, EditorTemplate.Checkbox)
                                </div>
                            </div>
                            <div class="modal-footer">
                                <input type="hidden" asp-for="CreateEnforcementAction.ActionType" />
                                <button type="submit" class="btn btn-primary">Submit</button>
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

            <script>
                document.addEventListener('DOMContentLoaded', function () {
                    const actionButtons = document.querySelectorAll('button[name="newEnforcementAction"]');
                    const label = document.getElementById('addEnforcementLabel');
                    const actionTypeHidden = document.getElementById('CreateEnforcementAction_ActionType');
                    const responseRequestedCheckbox = document.getElementById('CreateEnforcementAction_ResponseRequested').closest('.form-check');
                    const modal = new bootstrap.Modal(document.getElementById('addEnforcementModal'));

                    actionButtons.forEach(button => {
                        button.addEventListener('click', function () {
                            const actionType = this.value;
                            label.textContent = this.textContent.trim();
                            actionTypeHidden.value = actionType;

                            if (['LetterOfNoncompliance', 'InformationalLetter', 'NovNfaLetter'].includes(actionType)) {
                                responseRequestedCheckbox.style.display = 'block';
                            } else {
                                responseRequestedCheckbox.style.display = 'none';
                            }

                            modal.show();
                        });
                    });
                });
            </script>
        }
    </div>

    <div asp-validation-summary="All" class="alert alert-danger d-flex align-items-center" role="alert">
        <svg class="bi me-2" role="img" aria-label="Danger:">
            <use href="@Url.Content("~/images/app-icons.svg")#app-icon-exclamation-triangle-fill"></use>
        </svg>
    </div>

    @if (!caseFile.EnforcementActions.Any())
    {
        <p>
            <em>None.</em>
        </p>
    }
    else
    {
        var includeResponseRequestedModal = false;
        var includeResolveActionModal = false;
        var includeExecuteOrderModal = false;
        var includeAppealedOrderModal = false;
        var includeDeleteActionModal = false;

        @foreach (var action in caseFile.EnforcementActions.OrderBy(dto => dto.StatusDate))
        {
            var eaBorder = action.Id == Model.HighlightEnforcementId ? "border-success-subtle" : (action.IsDeleted ? "border-danger-subtle" : "");
            <div class="card mb-3 border-2 @eaBorder">
                <div class="card-header">
                    <div class="row justify-content-between align-items-center g-2">
                        <div class="col">
                            <h3 id="@action.Id.ToString()" class="h5 card-title">
                                @if (action.IsDeleted)
                                {
                                    <em class="text-danger-emphasis">Deleted</em>
                                }
                                @action.ActionType.GetDescription()
                            </h3>
                            <h4 class="col-auto h5 card-subtitle text-body-secondary">
                                @action.Status.GetDescription() @action.StatusDate?.ToString(DateTimeFormats.ShortDate)
                            </h4>
                        </div>
                        @if (!action.IsDeleted)
                        {
                            <div class="col-auto d-print-none">
                                <div class="dropdown">
                                    <button type="button" class="btn btn-sm btn-outline-primary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false" aria-label="More options">
                                        Actions
                                    </button>
                                    <ul class="dropdown-menu dropdown-menu-end">
                                        @if (Model.UserCan[EnforcementOperation.Edit] && User.CanEdit(action))
                                        {
                                            <li>
                                                <a asp-page="Edit/Index" asp-route-id="@action.Id.ToString()" class="dropdown-item">
                                                    Edit details
                                                </a>
                                            </li>
                                        }
                                        @if (User.CanSubmitForReview(action))
                                        {
                                            <li><a class="dropdown-item">Submit for review</a></li>
                                        }
                                        @if (User.CanFinalizeAction(action))
                                        {
                                            <li>
                                                <button class="dropdown-item" type="button" name="issueEnforcementAction"
                                                        data-eaType="@action.ActionType.GetDescription()" value="@action.Id.ToString()">
                                                    Issue (sent to facility)
                                                </button>
                                            </li>
                                            <li>
                                                <button class="dropdown-item" type="button" name="cancelEnforcementAction"
                                                        data-eaType="@action.ActionType.GetDescription()" value="@action.Id.ToString()">
                                                    Cancel (closed as unsent)
                                                </button>
                                            </li>
                                        }
                                        @if (Model.UserCan[EnforcementOperation.Edit] && action.CanAddResponse())
                                        {
                                            includeResponseRequestedModal = true;
                                            <li>
                                                <button type="button" name="addActionResponse" value="@action.Id.ToString()" class="dropdown-item">
                                                    Add response received
                                                </button>
                                            </li>
                                        }
                                        @if (Model.UserCan[EnforcementOperation.Edit] && User.CanResolve(action))
                                        {
                                            includeResolveActionModal = true;
                                            <li>
                                                <button type="button" name="resolveAction" value="@action.Id.ToString()" class="dropdown-item">
                                                    Resolve action
                                                </button>
                                            </li>
                                        }
                                        @if (Model.UserCan[EnforcementOperation.Edit] && action.CanBeExecuted())
                                        {
                                            includeExecuteOrderModal = true;
                                            <li>
                                                <button type="button" name="executeOrder" value="@action.Id.ToString()" class="dropdown-item">
                                                    Execute Order
                                                </button>
                                            </li>
                                        }
                                        @if (Model.UserCan[EnforcementOperation.Edit] && action.CanBeAppealed())
                                        {
                                            includeAppealedOrderModal = true;
                                            <li>
                                                <button type="button" name="appealOrder" value="@action.Id.ToString()" class="dropdown-item">
                                                    Order appealed
                                                </button>
                                            </li>
                                        }
                                        @if (Model.UserCan[EnforcementOperation.Delete] && User.CanDelete(action))
                                        {
                                            includeDeleteActionModal = true;
                                            <li>
                                                <button type="button" name="deleteEnforcementAction" class="dropdown-item link-danger"
                                                        data-eaType="@action.ActionType.GetDescription()" value="@action.Id.ToString()">
                                                    Delete action
                                                </button>
                                            </li>
                                        }
                                    </ul>
                                </div>
                            </div>
                        }
                    </div>
                </div>
                <div class="card-body">
                    @Html.DisplayFor(_ => action.Notes, DisplayTemplate.TextWithLinebreaks, new { Placeholder = "[No notes entered]" })
                    @switch (action)
                    {
                        case AoViewDto model:
                            <partial name="_Partials/_AoDetails" model="model" />
                            break;
                        case CoViewDto model:
                            <partial name="_Partials/_CoDetails" model="model" />
                            break;
                        case ProposedCoViewDto model:
                            <partial name="_Partials/_ProposedCoDetails" model="model" />
                            break;
                        case ResponseRequestedViewDto model:
                            <partial name="_Partials/_ResponseRequestedDetails" model="model" />
                            break;
                    }
                </div>
                <div class="card-footer">
                    <small class="text-body-secondary">
                        @if (action is IIsExecuted { IsExecuted: true } executed)
                        {
                            <div>
                                Executed
                                on @Html.DisplayFor(_ => executed.ExecutedDate, DisplayTemplate.ShortDateOnlyNullable)
                            </div>
                        }
                        @if (action.Status == EnforcementActionStatus.Draft)
                        {
                            <div>
                                Draft started
                                on @Html.DisplayFor(_ => action.StatusDate, DisplayTemplate.ShortDateOnlyNullable)
                            </div>
                        }
                        else if (action.Status == EnforcementActionStatus.ReviewRequested)
                        {
                            <div>
                                Awaiting review
                                by @Html.DisplayFor(_ => action.CurrentReviewer, DisplayTemplate.NameOrPlaceholder)
                                on @Html.DisplayFor(_ => action.ReviewRequestedDate, DisplayTemplate.ShortDateOnlyNullable)
                            </div>
                        }
                        else if (action.Status == EnforcementActionStatus.Approved)
                        {
                            <div>
                                Approved
                                by @Html.DisplayFor(_ => action.ApprovedBy, DisplayTemplate.NameOrPlaceholder)
                                on @Html.DisplayFor(_ => action.ApprovedDate, DisplayTemplate.ShortDateOnlyNullable)
                            </div>
                        }
                        else if (action.Status == EnforcementActionStatus.Issued)
                        {
                            <div>
                                Issued
                                on @Html.DisplayFor(_ => action.IssueDate, DisplayTemplate.ShortDateOnlyNullable)
                            </div>
                        }
                        else if (action.Status == EnforcementActionStatus.Canceled)
                        {
                            <div>
                                Canceled
                                on @Html.DisplayFor(_ => action.CanceledDate, DisplayTemplate.ShortDateOnlyNullable)
                            </div>
                        }
                        @if (action is IIsResolved { IsResolved: true } resolved)
                        {
                            <div>
                                Resolved
                                on @Html.DisplayFor(_ => resolved.ResolvedDate, DisplayTemplate.ShortDateOnlyNullable)
                            </div>
                        }
                        @if (action.IsDeleted)
                        {
                            <div>
                                <span class="text-danger-emphasis">Deleted</span>
                                by @Html.DisplayFor(_ => action.DeletedBy, DisplayTemplate.NameOrPlaceholder)
                                on @Html.DisplayFor(_ => action.DeletedAt, DisplayTemplate.LongDateTimeOffsetNullable)
                            </div>
                        }
                    </small>
                </div>
            </div>
        }

        // Modal form for issuing an enforcement action.
        <div class="modal fade" id="issueEnforcementModal" tabindex="-1" aria-labelledby="issueEnforcementModalLabel" aria-modal="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="issueEnforcementModalLabel">Issue
                            <span id="issueEnforcementLabel"></span></h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <form method="post" asp-page-handler="IssueEnforcementAction" asp-fragment="enforcement-actions" id="IssueEnforcementActionForm">
                        <div class="modal-body">
                            <p>The enforcement action will be marked as having been issued to the facility.</p>
                            <div class="form-floating">
                                <input asp-for="IssueEnforcementAction.Date" class="form-control" />
                                <label for="@nameof(Model.IssueEnforcementAction)_@nameof(Model.IssueEnforcementAction.Date)" class="form-label">Date
                                    Issued</label>
                                <span asp-validation-for="IssueEnforcementAction.Date" class="invalid-feedback"></span>
                            </div>
                            <div class="form-check mt-2" id="issueEnforcementCloseOption">
                                <input asp-for="IssueEnforcementAction.Option" class="form-check-input" />
                                <label for="@nameof(Model.IssueEnforcementAction)_@nameof(Model.IssueEnforcementAction.Option)" class="form-check-label">
                                    Close the Enforcement Case as well.
                                </label>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <input type="hidden" id="issueEnforcementActionId" name="enforcementActionId" value="" />
                            <button type="submit" class="btn btn-primary">Submit</button>
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <script>
            document.addEventListener('DOMContentLoaded', function () {
                const actionButtons = document.querySelectorAll('button[name="issueEnforcementAction"]');
                const label = document.getElementById('issueEnforcementLabel');
                const actionIdHidden = document.getElementById('issueEnforcementActionId');
                const actionCloseOption = document.getElementById('issueEnforcementCloseOption');
                const modal = new bootstrap.Modal(document.getElementById('issueEnforcementModal'));

                const actionDate = document.getElementById('IssueEnforcementAction_Date');
                actionDate.max = todayHtmlString;
                if (today.getTime() < actionDate.valueAsDate.getTime()) actionDate.value = todayHtmlString;

                actionButtons.forEach(button => {
                    button.addEventListener('click', function () {
                        actionIdHidden.value = this.value;
                        const eaType = this.getAttribute('data-eaType').trim();
                        label.textContent = eaType;
                        if (eaType !== "No Further Action Letter" && eaType !== "Combined NOV/NFA Letter")
                            actionCloseOption.remove();
                        modal.show();
                    });
                });
            });
        </script>

        // Modal form for canceling an enforcement action.
        <div class="modal fade" id="cancelEnforcementModal" tabindex="-1" aria-labelledby="cancelEnforcementModalLabel" aria-modal="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="modal-title">
                            <h5 id="cancelEnforcementModalLabel">Cancel the <span id="cancelEnforcementLabel"></span>
                            </h5>
                            <h6>(Close as unsent)</h6>
                        </div>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <form method="post" asp-page-handler="CancelEnforcementAction" asp-fragment="enforcement-actions" id="cancelEnforcementActionForm">
                        <div class="modal-body">
                            <p>The enforcement action will be canceled and closed as unsent.</p>
                        </div>
                        <div class="modal-footer">
                            <input type="hidden" id="cancelEnforcementActionId" name="enforcementActionId" value="" />
                            <button type="submit" class="btn btn-primary">Submit</button>
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <script>
            document.addEventListener('DOMContentLoaded', function () {
                const actionButtons = document.querySelectorAll('button[name="cancelEnforcementAction"]');
                const label = document.getElementById('cancelEnforcementLabel');
                const actionIdHidden = document.getElementById('cancelEnforcementActionId');
                const modal = new bootstrap.Modal(document.getElementById('cancelEnforcementModal'));

                actionButtons.forEach(button => {
                    button.addEventListener('click', function () {
                        actionIdHidden.value = this.value;
                        label.textContent = this.getAttribute('data-eaType').trim();
                        modal.show();
                    });
                });
            });
        </script>

        @if (includeDeleteActionModal)
        {
            // Modal form for deleting an enforcement action.
            <div class="modal fade" id="deleteEnforcementModal" tabindex="-1" aria-labelledby="deleteEnforcementModalLabel" aria-modal="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title text-danger-emphasis" id="deleteEnforcementModalLabel">Delete
                                <span id="deleteEnforcementLabel"></span></h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <form method="post" asp-page-handler="DeleteEnforcementAction" id="DeleteEnforcementActionForm" asp-fragment="enforcement-actions">
                            <div class="modal-body">
                                Are you sure you want to delete this enforcement action?<br>
                                <strong>This cannot be undone!</strong>
                                <p class="callout callout-danger">
                                    Deleted Enforcement Actions are not removed from the database, but they are hidden
                                    from most search results and views and are not publicly available.
                                </p>
                            </div>
                            <div class="modal-footer">
                                <input type="hidden" id="deleteEnforcementActionId" name="enforcementActionId" value="" />
                                <button type="submit" class="btn btn-danger">Delete Enforcement Action</button>
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

            <script>
                document.addEventListener('DOMContentLoaded', function () {
                    const actionButtons = document.querySelectorAll('button[name="deleteEnforcementAction"]');
                    const label = document.getElementById('deleteEnforcementLabel');
                    const actionIdHidden = document.getElementById('deleteEnforcementActionId');
                    const modal = new bootstrap.Modal(document.getElementById('deleteEnforcementModal'));

                    actionButtons.forEach(button => {
                        button.addEventListener('click', function () {
                            actionIdHidden.value = this.value;
                            label.textContent = this.getAttribute('data-eaType').trim();
                            modal.show();
                        });
                    });
                });
            </script>
        }

        @if (includeResponseRequestedModal)
        {
            // Modal form for adding a response to an enforcement action.
            <div class="modal fade" id="addResponseModal" tabindex="-1" aria-labelledby="addResponseModalLabel" aria-modal="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="addResponseModalLabel">Add Response</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <form method="post" asp-page-handler="AddEnforcementActionResponse" id="AddResponseActionForm">
                            <div class="modal-body">
                                @Html.EditorFor(m => m.AddEnforcementActionResponse.Comment, EditorTemplate.Textarea, new { Rows = 4 })
                                <div class="form-floating mt-2">
                                    <input asp-for="AddEnforcementActionResponse.Date" class="form-control" />
                                    <label for="@nameof(Model.AddEnforcementActionResponse)_@nameof(Model.AddEnforcementActionResponse.Date)" class="form-label">Date
                                        Received</label>
                                    <span asp-validation-for="AddEnforcementActionResponse.Date" class="invalid-feedback"></span>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <input type="hidden" id="addResponseActionId" name="enforcementActionId" value="" />
                                <button type="submit" class="btn btn-primary">Submit</button>
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

            <script>
                document.addEventListener('DOMContentLoaded', function () {
                    const actionButtons = document.querySelectorAll('button[name="addActionResponse"]');
                    const actionIdHidden = document.getElementById('addResponseActionId');
                    const modal = new bootstrap.Modal(document.getElementById('addResponseModal'));

                    const actionDate = document.getElementById('AddEnforcementActionResponse_Date');
                    actionDate.max = todayHtmlString;
                    if (today.getTime() < actionDate.valueAsDate.getTime())
                        actionDate.value = todayHtmlString;

                    actionButtons.forEach(button => {
                        button.addEventListener('click', function () {
                            actionIdHidden.value = this.value;
                            modal.show();
                        });
                    });
                });
            </script>
        }

        @if (includeExecuteOrderModal)
        {
            // Modal form for executing a formal enforcement action.
            <div class="modal fade" id="executeOrderModal" tabindex="-1" aria-labelledby="executeOrderModalLabel" aria-modal="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="executeOrderModalLabel">Execute Order</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <form method="post" asp-page-handler="ExecuteOrder" id="ExecuteOrderForm">
                            <div class="modal-body">
                                <div class="form-floating mt-2">
                                    <input asp-for="ExecuteOrder.Date" class="form-control" />
                                    <label for="@nameof(Model.ExecuteOrder)_@nameof(Model.ExecuteOrder.Date)" class="form-label">Date
                                        Executed</label>
                                    <span asp-validation-for="ExecuteOrder.Date" class="invalid-feedback"></span>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <input type="hidden" id="executeOrderId" name="enforcementActionId" value="" />
                                <button type="submit" class="btn btn-primary">Submit</button>
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

            <script>
                document.addEventListener('DOMContentLoaded', function () {
                    const actionButtons = document.querySelectorAll('button[name="executeOrder"]');
                    const actionIdHidden = document.getElementById('executeOrderId');
                    const modal = new bootstrap.Modal(document.getElementById('executeOrderModal'));

                    const actionDate = document.getElementById('ExecuteOrder_Date');
                    actionDate.max = todayHtmlString;
                    if (today.getTime() < actionDate.valueAsDate.getTime())
                        actionDate.value = todayHtmlString;

                    actionButtons.forEach(button => {
                        button.addEventListener('click', function () {
                            actionIdHidden.value = this.value;
                            modal.show();
                        });
                    });
                });
            </script>
        }

        @if (includeAppealedOrderModal)
        {
            // Modal form for appealing an administrative order.
            <div class="modal fade" id="appealOrderModal" tabindex="-1" aria-labelledby="appealOrderModalLabel" aria-modal="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="appealOrderModalLabel">Administrative Order Appealed</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <form method="post" asp-page-handler="AppealOrder" id="AppealOrderForm">
                            <div class="modal-body">
                                <div class="form-floating mt-2">
                                    <input asp-for="AppealOrder.Date" class="form-control" />
                                    <label for="@nameof(Model.AppealOrder)_@nameof(Model.AppealOrder.Date)" class="form-label">Date
                                        Appealed</label>
                                    <span asp-validation-for="AppealOrder.Date" class="invalid-feedback"></span>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <input type="hidden" id="appealOrderId" name="enforcementActionId" value="" />
                                <button type="submit" class="btn btn-primary">Submit</button>
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

            <script>
                document.addEventListener('DOMContentLoaded', function () {
                    const actionButtons = document.querySelectorAll('button[name="appealOrder"]');
                    const actionIdHidden = document.getElementById('appealOrderId');
                    const modal = new bootstrap.Modal(document.getElementById('appealOrderModal'));

                    const actionDate = document.getElementById('AppealOrder_Date');
                    actionDate.max = todayHtmlString;
                    if (today.getTime() < actionDate.valueAsDate.getTime())
                        actionDate.value = todayHtmlString;

                    actionButtons.forEach(button => {
                        button.addEventListener('click', function () {
                            actionIdHidden.value = this.value;
                            modal.show();
                        });
                    });
                });
            </script>
        }

        @if (includeResolveActionModal)
        {
            // Modal form for resolving an enforcement action.
            <div class="modal fade" id="resolveActionModal" tabindex="-1" aria-labelledby="resolveActionModalLabel" aria-modal="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="resolveActionModalLabel">Resolve Enforcement Action</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <form method="post" asp-page-handler="ResolveAction" id="ResolveActionForm">
                            <div class="modal-body">
                                <div class="form-floating mt-2">
                                    <input asp-for="ResolveEnforcementAction.Date" class="form-control" />
                                    <label for="@nameof(Model.ResolveEnforcementAction)_@nameof(Model.ResolveEnforcementAction.Date)" class="form-label">Date
                                        Resolved</label>
                                    <span asp-validation-for="ResolveEnforcementAction.Date" class="invalid-feedback"></span>
                                </div>
                                <div class="form-check mt-2">
                                    <input asp-for="ResolveEnforcementAction.Option" class="form-check-input" />
                                    <label for="@nameof(Model.ResolveEnforcementAction)_@nameof(Model.ResolveEnforcementAction.Option)" class="form-check-label">
                                        Close the Enforcement Case as well.
                                    </label>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <input type="hidden" id="resolveActionId" name="enforcementActionId" value="" />
                                <button type="submit" class="btn btn-primary">Submit</button>
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

            <script>
                document.addEventListener('DOMContentLoaded', function () {
                    const actionButtons = document.querySelectorAll('button[name="resolveAction"]');
                    const actionIdHidden = document.getElementById('resolveActionId');
                    const modal = new bootstrap.Modal(document.getElementById('resolveActionModal'));

                    const actionDate = document.getElementById('ResolveEnforcementAction_Date');
                    actionDate.max = todayHtmlString;
                    if (today.getTime() < actionDate.valueAsDate.getTime())
                        actionDate.value = todayHtmlString;

                    actionButtons.forEach(button => {
                        button.addEventListener('click', function () {
                            actionIdHidden.value = this.value;
                            modal.show();
                        });
                    });
                });
            </script>
        }
    }
</section>

@{
    ViewData["CommentsTitle"] = "Case File Comments";
}
<partial name="Shared/_CommentsSectionPartial" model="Model.CommentSection" view-data="ViewData" />

@if (Model.UserCan[EnforcementOperation.Delete])
{
    <div class="mt-4 text-end d-print-none">
        <a asp-page="Delete" asp-route-id="@Model.Id.ToString()" class="btn btn-sm btn-link px-0 link-danger link-offset-2">
            Delete Enforcement Case
        </a>
    </div>
}

@section Scripts {
    <partial name="Shared/_ValidationScriptsPartial" />
}
