@page "{id:int?}"
@using AirWeb.AppServices.Compliance.WorkEntries.Search
@using AirWeb.AppServices.Enforcement.EnforcementActionQuery
@using AirWeb.AppServices.Enforcement.Permissions
@using AirWeb.Domain.EnforcementEntities.EnforcementActions
@using AirWeb.WebApp.Pages.Shared.DisplayTemplates
@using AirWeb.WebApp.Pages.Shared.EditorTemplates
@using AirWeb.WebApp.Platform.Constants
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model DetailsModel
@{
    var caseFile = Model.Item!;
    ViewData["Title"] = $"Enforcement #{Model.Id} – Facility {caseFile.FacilityId}";
}

@if (caseFile.IsDeleted)
{
    <div class="callout callout-danger mb-3">
        <div class="container-full">
            <div class="row justify-content-between align-items-center g-0 my-1">
                <div class="col">
                    <h2 class="h4 text-danger-emphasis">This Enforcement Case has been deleted.</h2>
                </div>
                @if (Model.UserCan[EnforcementOperation.Restore])
                {
                    <div class="col-auto d-print-none ms-2">
                        <a asp-page="Restore" asp-route-id="@Model.Id" class="btn btn-outline-warning">
                            Restore deleted enforcement
                        </a>
                    </div>
                }
            </div>
        </div>
        <p>
            Deleted by @Html.DisplayFor(_ => caseFile.DeletedBy, DisplayTemplate.NameOrPlaceholder)
            on @Html.DisplayFor(_ => caseFile.DeletedAt, DisplayTemplate.LongDateTimeOffsetNullable)
        </p>
        <h3 class="h5">Comments</h3>
        <p class="text-break text-pre-line">@Html.DisplayFor(_ => caseFile.DeleteComments, DisplayTemplate.TextOrPlaceholder)</p>
    </div>
}

<div class="row justify-content-between align-items-center mb-2">
    <div class="col-md">
        <h1 class="mb-md-0">Enforcement Case</h1>
    </div>
    @if (!caseFile.IsDeleted)
    {
        <div class="col-md-auto ms-md-3 d-print-none">
            <div class="btn-group">
                @if (Model.UserCan[EnforcementOperation.Close])
                {
                    <a asp-page="Close" asp-route-id="@Model.Id.ToString()" class="btn btn-outline-primary">Close</a>
                }
                @if (Model.UserCan[EnforcementOperation.Reopen])
                {
                    <a asp-page="Reopen" asp-route-id="@Model.Id.ToString()" class="btn btn-outline-primary">Reopen</a>
                }
                @if (Model.UserCan[EnforcementOperation.Edit])
                {
                    <a asp-page="Edit" asp-route-id="@Model.Id.ToString()" class="btn btn-outline-primary">Edit</a>
                }
            </div>
        </div>
    }
</div>

<div class=" lead">Enforcement Tracking #@Model.Id.ToString()</div>

<section class="mt-3">
    <h2 class="visually-hidden">Details</h2>
    <dl class="row mb-2">
        <dt class="col-sm-4 col-lg-3">Status</dt>
        <dd class="col-sm-8 col-lg-9">
            <div class="rounded-1 py-1 px-2 ms-n2 @(caseFile.CaseStatusClass)">@caseFile.CaseFileStatus.GetDescription()</div>
            @if (caseFile.IsClosed)
            {
                <div class="mt-1">
                    Closed by @Html.DisplayFor(_ => caseFile.ClosedBy, DisplayTemplate.NameOrPlaceholder)
                    on @Html.DisplayFor(_ => caseFile.ClosedDate, DisplayTemplate.ShortDateOnlyNullable)
                </div>
            }
        </dd>
        <dt class="col-sm-4 col-lg-3">Facility</dt>
        <dd class="col-sm-8 col-lg-9">
            <partial name="Shared/FacilityPartials/_FacilityAirsNameLink"
                     model="(caseFile.FacilityId, caseFile.FacilityName)" />
        </dd>
        <dt class="col-sm-4 col-lg-3">@Html.DisplayNameFor(_ => caseFile.ResponsibleStaff)</dt>
        <dd class="col-sm-8 col-lg-9">@Html.DisplayFor(_ => caseFile.ResponsibleStaff, DisplayTemplate.NameOrPlaceholder)</dd>
        <dt class="col-sm-4 col-lg-3">@Html.DisplayNameFor(_ => caseFile.DiscoveryDate)</dt>
        <dd class="col-sm-8 col-lg-9">@Html.DisplayFor(_ => caseFile.DiscoveryDate, DisplayTemplate.ShortDateOnlyNullable)</dd>
        @if (caseFile.HasReportableEnforcement)
        {
            <dt class="col-sm-4 col-lg-3">@Html.DisplayNameFor(_ => caseFile.DayZero)</dt>
            <dd class="col-sm-8 col-lg-9">@Html.DisplayFor(_ => caseFile.DayZero, DisplayTemplate.ShortDateOnlyNullable)</dd>
            <dt class="col-sm-4 col-lg-3">@Html.DisplayNameFor(_ => caseFile.ViolationType)</dt>
            <dd class="col-sm-8 col-lg-9">@Html.DisplayFor(_ => caseFile.ViolationType)</dd>
        }
        <dt class="mb-2">@Html.DisplayNameFor(_ => caseFile.Notes)</dt>
        <dd>
            <div class="text-break text-pre-line border rounded p-3">@Html.DisplayFor(_ => caseFile.Notes, DisplayTemplate.TextOrPlaceholder, new { Placeholder = "[None]" })</div>
        </dd>
    </dl>

    <details class="border rounded-1">
        <summary class="bg-body-secondary px-2 py-1">
            Related Details
        </summary>
        <div class="container mt-2">
            <section class="mt-3">
                <div class="row justify-content-between align-items-baseline g-0">
                    <h3 class="h5 col-md">Linked Discovery Events</h3>
                    @if (Model.UserCan[EnforcementOperation.Edit])
                    {
                        <div class="col-md-auto d-print-none ms-md-3 mb-1 ">
                            <a asp-page="LinkedEvents" asp-route-id="@Model.Id" class="btn btn-sm btn-outline-primary">
                                Edit Linked Events
                            </a>
                        </div>
                    }
                </div>
                @if (!caseFile.ComplianceEvents.Any())
                {
                    <p>
                        <em>None.</em>
                    </p>
                }
                else
                {
                    <partial name="Shared/CompliancePartials/_WorkEntrySearchTable"
                             model="(caseFile.ComplianceEvents, (WorkEntrySearchDto?)null)" />
                }
            </section>

            @if (caseFile.HasReportableEnforcement)
            {
                <section class="mt-3">
                    <h3 class="h5">Associated Pollutants & Programs</h3>
                    <dl>
                        <dt>@Html.DisplayNameFor(_ => caseFile.Pollutants)</dt>
                        <dd>
                            <partial name="Facility/_Partials/_Pollutants" model="caseFile.Pollutants" />
                        </dd>
                        <dt>@Html.DisplayNameFor(_ => caseFile.AirPrograms)</dt>
                        <dd>
                            @Html.DisplayFor(_ => caseFile.AirProgramsAsStrings, DisplayTemplate.StringListOrPlaceholder)
                        </dd>
                    </dl>
                </section>
            }
        </div>
    </details>
</section>

<section class="mt-4">
    <div class="row justify-content-between align-items-start mb-3">
        <div class="col-md">
            <h2 class="h3 mb-md-0">Enforcement Actions</h2>
        </div>

        @if (Model.UserCan[EnforcementOperation.Edit])
        {
            <div class="col-md-auto ms-md-3 d-print-none">
                <button class="btn btn-sm btn-outline-primary dropdown-toggle icon-link" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <svg class="bi">
                        <use href="@Url.Content("~/images/app-icons.svg")#app-icon-plus-lg"></use>
                    </svg>
                    Enforcement Action
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    @foreach (var actionType in Enum.GetValues(typeof(EnforcementActionType)).Cast<EnforcementActionType>())
                    {
                        <li>
                            <button class="dropdown-item" type="button" name="newEnforcementAction" value="@actionType.ToString()">@actionType.GetDescription()</button>
                        </li>
                    }
                </ul>
            </div>

            // Modal form for creating a new enforcement action. 
            <div class="modal fade" id="addEnforcementModal" tabindex="-1" aria-labelledby="addEnforcementModalLabel" aria-modal="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="addEnforcementModalLabel">Add 
                                <span id="addEnforcementLabel"></span></h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <form method="post" asp-page-handler="AddEnforcementAction" id="AddEnforcementActionForm">
                            <div class="modal-body">
                                @Html.EditorFor(m => m.CreateEnforcementAction.Comment, EditorTemplate.Textarea, new { Rows = 4 })
                                <div class="mt-2">
                                    @Html.EditorFor(m => m.CreateEnforcementAction.ResponseRequested, EditorTemplate.Checkbox)
                                </div>
                            </div>
                            <div class="modal-footer">
                                <input type="hidden" id="addEnforcementActionType" name="actionType" value="" />
                                <button type="submit" class="btn btn-primary" id="submitButton">Submit</button>
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

            <script>
                document.addEventListener('DOMContentLoaded', function () {
                    const actionButtons = document.querySelectorAll('button[name="newEnforcementAction"]');
                    const addEnforcementLabel = document.getElementById('addEnforcementLabel');
                    const addEnforcementActionType = document.getElementById('addEnforcementActionType');
                    const responseRequestedCheckbox = document.getElementById('CreateEnforcementAction_ResponseRequested').closest('.form-check');
                    const addEnforcementModal = new bootstrap.Modal(document.getElementById('addEnforcementModal'));

                    actionButtons.forEach(button => {
                        button.addEventListener('click', function () {
                            const actionType = this.value;
                            addEnforcementLabel.textContent = this.textContent.trim();
                            addEnforcementActionType.value = actionType;

                            if (['LetterOfNoncompliance', 'InformationalLetter', 'NovNfaLetter'].includes(actionType)) {
                                responseRequestedCheckbox.style.display = 'block';
                            } else {
                                responseRequestedCheckbox.style.display = 'none';
                            }

                            addEnforcementModal.show();
                        });
                    });
                });
            </script>
        }
    </div>

    <div asp-validation-summary="All" class="alert alert-danger d-flex align-items-center" role="alert">
        <svg class="bi me-2" role="img" aria-label="Danger:">
            <use href="@Url.Content("~/images/app-icons.svg")#app-icon-exclamation-triangle-fill"></use>
        </svg>
    </div>

    @if (!caseFile.EnforcementActions.Any())
    {
        <p>
            <em>None.</em>
        </p>
    }
    else
    {
        @foreach (var action in caseFile.EnforcementActions.OrderBy(dto => dto.StatusDate))
        {
            var eaBorder = action.Id == Model.NewEnforcementId ? "border-success-subtle" : (action.IsDeleted ? "border-danger-subtle" : "");
            <div id="@action.Id.ToString()" class="card mb-3 border-2 @eaBorder">
                <div class="card-header">
                    <div class="row justify-content-between align-items-center g-2">
                        <div class="col">
                            <h3 class="h5 card-title">
                                @if (action.IsDeleted)
                                {
                                    <em class="text-danger-emphasis">Deleted</em>
                                }
                                @action.ActionType.GetDescription()
                            </h3>
                            <h4 class="col-auto h5 card-subtitle text-body-secondary">
                                @action.Status.GetDescription() @action.StatusDate?.ToString(DateTimeFormatConstants.ShortDateFormat)
                            </h4>
                        </div>
                        @if (action is { IsDeleted: false, Status: EnforcementActionStatus.Draft or EnforcementActionStatus.Approved })
                        {
                            <div class="col-auto d-print-none">
                                <div class="dropdown">
                                    <button type="button" class="btn btn-sm btn-outline-primary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false" aria-label="More options">
                                        Actions
                                    </button>
                                    <ul class="dropdown-menu dropdown-menu-end">
                                        @if (action.Status == EnforcementActionStatus.Draft)
                                        {
                                            <li><a class="dropdown-item">Submit for review</a></li>
                                        }
                                        <li>
                                            <button class="dropdown-item" type="button" name="issueEnforcementAction"
                                                    data-eatype="@action.ActionType.GetDescription()" value="@action.Id.ToString()">
                                                Issue
                                            </button>
                                        </li>
                                        <li><a class="dropdown-item">Close as unsent</a></li>
                                    </ul>
                                </div>
                            </div>
                        }
                    </div>
                </div>
                <div class="card-body">
                    <div class="row justify-content-between align-items-baseline g-0 mb-3">
                        <div class="col">
                            @Html.DisplayFor(_ => action.Notes, DisplayTemplate.TextOrPlaceholder, new { Placeholder = "[No notes entered]" })
                        </div>
                        @if (Model.UserCan[EnforcementOperation.Edit])
                        {
                            <div class="col-auto d-print-none ms-3">
                                <a asp-page="Edit" asp-route-id="@action.Id.ToString()" class="btn btn-sm btn-outline-primary">Edit</a>
                            </div>
                        }
                    </div>
                    @switch (action)
                    {
                        case AoViewDto model:
                            <partial name="_Partials/_AoDetails" model="model" />
                            break;
                        case CoViewDto model:
                            <partial name="_Partials/_CoDetails" model="model" />
                            break;
                        case ProposedCoViewDto model:
                            <partial name="_Partials/_ProposedCoDetails" model="model" />
                            break;
                        case ResponseRequestedViewDto model:
                            <partial name="_Partials/_ResponseRequestedDetails" model="model" />
                            break;
                    }
                </div>
                <div class="card-footer">
                    <div class="row justify-content-between align-items-center g-0 my-1">
                        <small class="col text-body-secondary">
                            @if (action.IsDeleted)
                            {
                                <div>
                                    Deleted
                                    by @Html.DisplayFor(_ => action.DeletedBy, DisplayTemplate.NameOrPlaceholder)
                                    on @Html.DisplayFor(_ => action.DeletedAt, DisplayTemplate.LongDateTimeOffsetNullable)
                                </div>
                            }
                            @if (action.Status == EnforcementActionStatus.Draft)
                            {
                                <div>
                                    Draft started
                                    on @Html.DisplayFor(_ => action.StatusDate, DisplayTemplate.ShortDateOnlyNullable)
                                </div>
                            }
                            else if (action.Status == EnforcementActionStatus.ReviewRequested)
                            {
                                <div>
                                    Awaiting review
                                    by @Html.DisplayFor(_ => action.CurrentReviewer, DisplayTemplate.NameOrPlaceholder)
                                    on @Html.DisplayFor(_ => action.ReviewRequestedDate, DisplayTemplate.ShortDateOnlyNullable)
                                </div>
                            }
                            else if (action.Status == EnforcementActionStatus.Approved)
                            {
                                <div>
                                    Approved
                                    by @Html.DisplayFor(_ => action.ApprovedBy, DisplayTemplate.NameOrPlaceholder)
                                    on @Html.DisplayFor(_ => action.ApprovedDate, DisplayTemplate.ShortDateOnlyNullable)
                                </div>
                            }
                            else if (action.Status == EnforcementActionStatus.Issued)
                            {
                                <div>
                                    Issued
                                    on @Html.DisplayFor(_ => action.IssueDate, DisplayTemplate.ShortDateOnlyNullable)
                                </div>
                            }
                            else if (action.Status == EnforcementActionStatus.ClosedAsUnsent)
                            {
                                <div>
                                    Closed as unsent
                                    on @Html.DisplayFor(_ => action.ClosedAsUnsentDate, DisplayTemplate.ShortDateOnlyNullable)
                                </div>
                            }
                        </small>
                        @if (Model.UserCan[EnforcementOperation.Delete])
                        {
                            <div class="col-auto d-print-none ms-2">
                                <button type="submit" class="btn btn-sm btn-link px-0 link-danger link-offset-2">
                                    Delete Action
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }

        // Modal form for issuing an enforcement action. 
        <div class="modal fade" id="issueEnforcementModal" tabindex="-1" aria-labelledby="issueEnforcementModalLabel" aria-modal="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="issueEnforcementModalLabel">Issue
                            <span id="issueEnforcementLabel"></span></h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <form method="post" asp-page-handler="IssueEnforcementAction" asp-fragment="enforcement-actions" id="IssueEnforcementActionForm">
                        <div class="modal-body">
                            <div class="form-floating">
                                <input asp-for="IssueEnforcementActionDate.Date" class="form-control" />
                                <label for="IssueEnforcementActionDate_Date" class="form-label">Date Issued</label>
                                <span asp-validation-for="IssueEnforcementActionDate.Date" class="invalid-feedback"></span>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <input type="hidden" id="issueEnforcementActionId" name="enforcementActionId" value="" />
                            <button type="submit" class="btn btn-primary" id="submitButton">Submit</button>
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <script>
            document.addEventListener('DOMContentLoaded', function () {
                const actionButtons = document.querySelectorAll('button[name="issueEnforcementAction"]');
                const issueEnforcementLabel = document.getElementById('issueEnforcementLabel');
                const issueEnforcementActionId = document.getElementById('issueEnforcementActionId');
                const issueEnforcementModal = new bootstrap.Modal(document.getElementById('issueEnforcementModal'));
                const issueEnforcementActionDateInput = document.getElementById('IssueEnforcementActionDate_Date');
                issueEnforcementActionDateInput.max = new Date().toLocaleDateString('fr-ca');
                issueEnforcementActionDateInput.value = new Date().getTime() > new Date(issueEnforcementActionDateInput.value).getTime() ? issueEnforcementActionDateInput.value : new Date().toLocaleDateString('fr-ca');


                actionButtons.forEach(button => {
                    button.addEventListener('click', function () {
                        issueEnforcementActionId.value = this.value;
                        issueEnforcementLabel.textContent = this.getAttribute('data-eatype').trim();
                        issueEnforcementModal.show();
                    });
                });
            });
        </script>
    }
</section>

<partial name="Shared/_CommentsSectionPartial" model="Model.CommentSection" />

@if (Model.UserCan[EnforcementOperation.Delete])
{
    <div class="mt-4 text-end d-print-none">
        <a asp-page="Delete" asp-route-id="@Model.Id.ToString()" class="btn btn-sm btn-link px-0 link-danger link-offset-2">
            Delete Enforcement Case
        </a>
    </div>
}

@section Scripts {
    <partial name="Shared/_ValidationScriptsPartial" />
}
