// <auto-generated />
using System;
using AirWeb.EfRepository.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AirWeb.EfRepository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AirWeb.Domain.AuditPoints.AuditPoint", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("MoreInfo")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("What")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("When")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("WhoId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("WhoId");

                    b.ToTable("AuditPoints", (string)null);

                    b.HasDiscriminator().HasValue("AuditPoint");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AirWeb.Domain.Comments.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommentById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CommentedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(15000)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CommentById");

                    b.ToTable("Comments", (string)null);

                    b.HasDiscriminator().HasValue("Comment");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AirWeb.Domain.ComplianceEntities.Fces.Fce", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("CompletedDate")
                        .HasColumnType("date");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteComments")
                        .HasMaxLength(7000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FacilityId")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(7000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OnsiteInspection")
                        .HasColumnType("bit");

                    b.Property<string>("ReviewedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeletedById");

                    b.HasIndex("ReviewedById");

                    b.ToTable("Fces");
                });

            modelBuilder.Entity("AirWeb.Domain.ComplianceEntities.WorkEntries.WorkEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("AcknowledgmentLetterDate")
                        .HasColumnType("date");

                    b.Property<string>("ClosedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly?>("ClosedDate")
                        .HasColumnType("date");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteComments")
                        .HasMaxLength(7000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly>("EventDate")
                        .HasColumnType("date");

                    b.Property<string>("FacilityId")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsComplianceEvent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(7000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsibleStaffId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkEntryType")
                        .IsRequired()
                        .HasMaxLength(29)
                        .HasColumnType("nvarchar(29)");

                    b.HasKey("Id");

                    b.HasIndex("ClosedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("ResponsibleStaffId");

                    b.ToTable("WorkEntries", (string)null);

                    b.HasDiscriminator<string>("WorkEntryType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AirWeb.Domain.EmailLog.EmailLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CopyRecipients")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("HtmlBody")
                        .HasMaxLength(20000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recipients")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TextBody")
                        .HasMaxLength(15000)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmailLogs");
                });

            modelBuilder.Entity("AirWeb.Domain.EnforcementEntities.CaseFiles.CaseFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<short?>("ActionNumber")
                        .HasColumnType("smallint");

                    b.Property<string>("AirPrograms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CaseFileStatus")
                        .IsRequired()
                        .HasMaxLength(27)
                        .HasColumnType("nvarchar(27)");

                    b.Property<string>("ClosedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly?>("ClosedDate")
                        .HasColumnType("date");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataExchangeStatus")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<DateOnly?>("DayZero")
                        .HasColumnType("date");

                    b.Property<string>("DeleteComments")
                        .HasMaxLength(7000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly?>("DiscoveryDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("EnforcementDate")
                        .HasColumnType("date");

                    b.Property<string>("FacilityId")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(7000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PollutantIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsibleStaffId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ViolationTypeCode")
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("ClosedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("ResponsibleStaffId");

                    b.HasIndex("ViolationTypeCode");

                    b.ToTable("CaseFiles");
                });

            modelBuilder.Entity("AirWeb.Domain.EnforcementEntities.EnforcementActions.ActionProperties.EnforcementActionReview", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EnforcementActionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RequestedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RequestedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestedOfId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Result")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("ReviewComments")
                        .HasMaxLength(7000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EnforcementActionId");

                    b.HasIndex("RequestedById");

                    b.HasIndex("RequestedOfId");

                    b.HasIndex("ReviewedById");

                    b.ToTable("EnforcementActionReviews");
                });

            modelBuilder.Entity("AirWeb.Domain.EnforcementEntities.EnforcementActions.ActionProperties.StipulatedPenalty", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<Guid>("ConsentOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(7000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("ReceivedDate")
                        .HasColumnType("date");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConsentOrderId");

                    b.ToTable("StipulatedPenalties");
                });

            modelBuilder.Entity("AirWeb.Domain.EnforcementEntities.EnforcementActions.EnforcementAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<short?>("ActionNumber")
                        .HasColumnType("smallint");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApprovedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CaseFileId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentReviewerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DataExchangeStatus")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("DeleteComments")
                        .HasMaxLength(7000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("IssueDate")
                        .HasColumnType("date");

                    b.Property<string>("Notes")
                        .HasMaxLength(7000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReviewRequestedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("CaseFileId");

                    b.HasIndex("CurrentReviewerId");

                    b.HasIndex("DeletedById");

                    b.ToTable("EnforcementActions", (string)null);

                    b.HasDiscriminator<string>("ActionType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AirWeb.Domain.EnforcementEntities.ViolationTypes.ViolationType", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<bool>("Deprecated")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("SeverityCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("Code");

                    b.ToTable("ViolationTypes");
                });

            modelBuilder.Entity("AirWeb.Domain.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("AccountCreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("AccountUpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("MostRecentLogin")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ProfileUpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("OfficeId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CaseFileComplianceEvents", b =>
                {
                    b.Property<int>("CaseFilesId")
                        .HasColumnType("int");

                    b.Property<int>("ComplianceEventsId")
                        .HasColumnType("int");

                    b.HasKey("CaseFilesId", "ComplianceEventsId");

                    b.HasIndex("ComplianceEventsId");

                    b.ToTable("CaseFileComplianceEvents");
                });

            modelBuilder.Entity("GaEpd.AppLibrary.Domain.Entities.StandardNamedEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Lookups", (string)null);

                    b.HasDiscriminator().HasValue("StandardNamedEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AirWeb.Domain.AuditPoints.CaseFileAuditPoint", b =>
                {
                    b.HasBaseType("AirWeb.Domain.AuditPoints.AuditPoint");

                    b.Property<int>("CaseFileId")
                        .HasColumnType("int");

                    b.HasIndex("CaseFileId");

                    b.HasDiscriminator().HasValue("CaseFileAuditPoint");
                });

            modelBuilder.Entity("AirWeb.Domain.AuditPoints.FceAuditPoint", b =>
                {
                    b.HasBaseType("AirWeb.Domain.AuditPoints.AuditPoint");

                    b.Property<int>("FceId")
                        .HasColumnType("int");

                    b.HasIndex("FceId");

                    b.HasDiscriminator().HasValue("FceAuditPoint");
                });

            modelBuilder.Entity("AirWeb.Domain.AuditPoints.WorkEntryAuditPoint", b =>
                {
                    b.HasBaseType("AirWeb.Domain.AuditPoints.AuditPoint");

                    b.Property<int>("WorkEntryId")
                        .HasColumnType("int");

                    b.HasIndex("WorkEntryId");

                    b.HasDiscriminator().HasValue("WorkEntryAuditPoint");
                });

            modelBuilder.Entity("AirWeb.Domain.ComplianceEntities.Fces.FceComment", b =>
                {
                    b.HasBaseType("AirWeb.Domain.Comments.Comment");

                    b.Property<int>("FceId")
                        .HasColumnType("int");

                    b.HasIndex("FceId");

                    b.HasDiscriminator().HasValue("FceComment");
                });

            modelBuilder.Entity("AirWeb.Domain.ComplianceEntities.WorkEntries.WorkEntryComment", b =>
                {
                    b.HasBaseType("AirWeb.Domain.Comments.Comment");

                    b.Property<int>("WorkEntryId")
                        .HasColumnType("int");

                    b.HasIndex("WorkEntryId");

                    b.HasDiscriminator().HasValue("WorkEntryComment");
                });

            modelBuilder.Entity("AirWeb.Domain.EnforcementEntities.CaseFiles.CaseFileComment", b =>
                {
                    b.HasBaseType("AirWeb.Domain.Comments.Comment");

                    b.Property<int>("CaseFileId")
                        .HasColumnType("int");

                    b.HasIndex("CaseFileId");

                    b.HasDiscriminator().HasValue("CaseFileComment");
                });

            modelBuilder.Entity("AirWeb.Domain.ComplianceEntities.WorkEntries.ComplianceEvent", b =>
                {
                    b.HasBaseType("AirWeb.Domain.ComplianceEntities.WorkEntries.WorkEntry");

                    b.Property<string>("DataExchangeStatus")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");
                });

            modelBuilder.Entity("AirWeb.Domain.ComplianceEntities.WorkEntries.Notification", b =>
                {
                    b.HasBaseType("AirWeb.Domain.ComplianceEntities.WorkEntries.WorkEntry");

                    b.Property<DateOnly?>("DueDate")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("date")
                        .HasColumnName("DueDate");

                    b.Property<bool>("FollowupTaken")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bit")
                        .HasColumnName("FollowupTaken");

                    b.Property<Guid>("NotificationTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("ReceivedDate")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("date")
                        .HasColumnName("ReceivedDate");

                    b.Property<DateOnly?>("SentDate")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("date")
                        .HasColumnName("SentDate");

                    b.HasIndex("NotificationTypeId");

                    b.HasDiscriminator().HasValue("Notification");
                });

            modelBuilder.Entity("AirWeb.Domain.ComplianceEntities.WorkEntries.PermitRevocation", b =>
                {
                    b.HasBaseType("AirWeb.Domain.ComplianceEntities.WorkEntries.WorkEntry");

                    b.Property<bool>("FollowupTaken")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bit")
                        .HasColumnName("FollowupTaken");

                    b.Property<DateOnly>("PermitRevocationDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("PhysicalShutdownDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("ReceivedDate")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("date")
                        .HasColumnName("ReceivedDate");

                    b.HasDiscriminator().HasValue("PermitRevocation");
                });

            modelBuilder.Entity("AirWeb.Domain.EnforcementEntities.EnforcementActions.AdministrativeOrder", b =>
                {
                    b.HasBaseType("AirWeb.Domain.EnforcementEntities.EnforcementActions.EnforcementAction");

                    b.Property<DateOnly?>("AppealedDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ExecutedDate")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("date")
                        .HasColumnName("ExecutedDate");

                    b.Property<DateOnly?>("ResolvedDate")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("date")
                        .HasColumnName("ResolvedDate");

                    b.HasDiscriminator().HasValue("AdministrativeOrder");
                });

            modelBuilder.Entity("AirWeb.Domain.EnforcementEntities.EnforcementActions.ConsentOrder", b =>
                {
                    b.HasBaseType("AirWeb.Domain.EnforcementEntities.EnforcementActions.EnforcementAction");

                    b.Property<DateOnly?>("ExecutedDate")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("date")
                        .HasColumnName("ExecutedDate");

                    b.Property<short>("OrderId")
                        .HasColumnType("smallint");

                    b.Property<string>("OrderNumber")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<decimal?>("PenaltyAmount")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<string>("PenaltyComment")
                        .HasMaxLength(7000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("ReceivedFromDirectorsOffice")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ReceivedFromFacility")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ResolvedDate")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("date")
                        .HasColumnName("ResolvedDate");

                    b.Property<bool>("StipulatedPenaltiesDefined")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("ConsentOrder");
                });

            modelBuilder.Entity("AirWeb.Domain.EnforcementEntities.EnforcementActions.InformationalLetter", b =>
                {
                    b.HasBaseType("AirWeb.Domain.EnforcementEntities.EnforcementActions.EnforcementAction");

                    b.Property<string>("ResponseComment")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(7000)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ResponseComment");

                    b.Property<DateOnly?>("ResponseReceived")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("date")
                        .HasColumnName("ResponseReceived");

                    b.Property<bool>("ResponseRequested")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bit")
                        .HasColumnName("ResponseRequested");

                    b.HasDiscriminator().HasValue("InformationalLetter");
                });

            modelBuilder.Entity("AirWeb.Domain.EnforcementEntities.EnforcementActions.LetterOfNoncompliance", b =>
                {
                    b.HasBaseType("AirWeb.Domain.EnforcementEntities.EnforcementActions.EnforcementAction");

                    b.Property<DateOnly?>("ResolvedDate")
                        .HasColumnType("date");

                    b.Property<string>("ResponseComment")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(7000)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ResponseComment");

                    b.Property<DateOnly?>("ResponseReceived")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("date")
                        .HasColumnName("ResponseReceived");

                    b.Property<bool>("ResponseRequested")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bit")
                        .HasColumnName("ResponseRequested");

                    b.ToTable("EnforcementActions", t =>
                        {
                            t.Property("ResolvedDate")
                                .HasColumnName("LetterOfNoncompliance_ResolvedDate");
                        });

                    b.HasDiscriminator().HasValue("LetterOfNoncompliance");
                });

            modelBuilder.Entity("AirWeb.Domain.EnforcementEntities.EnforcementActions.NoFurtherActionLetter", b =>
                {
                    b.HasBaseType("AirWeb.Domain.EnforcementEntities.EnforcementActions.EnforcementAction");

                    b.HasDiscriminator().HasValue("NoFurtherActionLetter");
                });

            modelBuilder.Entity("AirWeb.Domain.EnforcementEntities.EnforcementActions.NoticeOfViolation", b =>
                {
                    b.HasBaseType("AirWeb.Domain.EnforcementEntities.EnforcementActions.EnforcementAction");

                    b.Property<string>("ResponseComment")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(7000)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ResponseComment");

                    b.Property<DateOnly?>("ResponseReceived")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("date")
                        .HasColumnName("ResponseReceived");

                    b.Property<bool>("ResponseRequested")
                        .HasColumnType("bit");

                    b.ToTable("EnforcementActions", t =>
                        {
                            t.Property("ResponseRequested")
                                .HasColumnName("NoticeOfViolation_ResponseRequested");
                        });

                    b.HasDiscriminator().HasValue("NoticeOfViolation");
                });

            modelBuilder.Entity("AirWeb.Domain.EnforcementEntities.EnforcementActions.NovNfaLetter", b =>
                {
                    b.HasBaseType("AirWeb.Domain.EnforcementEntities.EnforcementActions.EnforcementAction");

                    b.Property<string>("ResponseComment")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(7000)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ResponseComment");

                    b.Property<DateOnly?>("ResponseReceived")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("date")
                        .HasColumnName("ResponseReceived");

                    b.Property<bool>("ResponseRequested")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bit")
                        .HasColumnName("ResponseRequested");

                    b.HasDiscriminator().HasValue("NovNfaLetter");
                });

            modelBuilder.Entity("AirWeb.Domain.EnforcementEntities.EnforcementActions.ProposedConsentOrder", b =>
                {
                    b.HasBaseType("AirWeb.Domain.EnforcementEntities.EnforcementActions.EnforcementAction");

                    b.Property<string>("ResponseComment")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(7000)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ResponseComment");

                    b.Property<DateOnly?>("ResponseReceived")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("date")
                        .HasColumnName("ResponseReceived");

                    b.Property<bool>("ResponseRequested")
                        .HasColumnType("bit");

                    b.ToTable("EnforcementActions", t =>
                        {
                            t.Property("ResponseRequested")
                                .HasColumnName("ProposedConsentOrder_ResponseRequested");
                        });

                    b.HasDiscriminator().HasValue("ProposedConsentOrder");
                });

            modelBuilder.Entity("AirWeb.Domain.Lookups.NotificationTypes.NotificationType", b =>
                {
                    b.HasBaseType("GaEpd.AppLibrary.Domain.Entities.StandardNamedEntity");

                    b.HasDiscriminator().HasValue("NotificationType");
                });

            modelBuilder.Entity("AirWeb.Domain.Lookups.Offices.Office", b =>
                {
                    b.HasBaseType("GaEpd.AppLibrary.Domain.Entities.StandardNamedEntity");

                    b.HasDiscriminator().HasValue("Office");
                });

            modelBuilder.Entity("AirWeb.Domain.ComplianceEntities.WorkEntries.AnnualComplianceCertification", b =>
                {
                    b.HasBaseType("AirWeb.Domain.ComplianceEntities.WorkEntries.ComplianceEvent");

                    b.Property<int>("AccReportingYear")
                        .HasColumnType("int");

                    b.Property<bool>("CorrectlyCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("EnforcementNeeded")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bit")
                        .HasColumnName("EnforcementNeeded");

                    b.Property<bool>("IncludesAllTvConditions")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludesPreviouslyUnreportedDeviations")
                        .HasColumnType("bit");

                    b.Property<bool>("OnCorrectForms")
                        .HasColumnType("bit");

                    b.Property<DateOnly>("PostmarkDate")
                        .HasColumnType("date");

                    b.Property<bool>("PostmarkedOnTime")
                        .HasColumnType("bit");

                    b.Property<DateOnly>("ReceivedDate")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("date")
                        .HasColumnName("ReceivedDate");

                    b.Property<bool>("ReportsAllKnownDeviations")
                        .HasColumnType("bit");

                    b.Property<bool>("ReportsDeviations")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bit")
                        .HasColumnName("ReportsDeviations");

                    b.Property<bool>("ResubmittalRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("SignedByRo")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("AnnualComplianceCertification");
                });

            modelBuilder.Entity("AirWeb.Domain.ComplianceEntities.WorkEntries.BaseInspection", b =>
                {
                    b.HasBaseType("AirWeb.Domain.ComplianceEntities.WorkEntries.ComplianceEvent");

                    b.Property<bool>("DeviationsNoted")
                        .HasColumnType("bit")
                        .HasColumnName("DeviationsNoted");

                    b.Property<bool>("FacilityOperating")
                        .HasColumnType("bit")
                        .HasColumnName("FacilityOperating");

                    b.Property<bool>("FollowupTaken")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bit")
                        .HasColumnName("FollowupTaken");

                    b.Property<DateTime>("InspectionEnded")
                        .HasColumnType("datetime2")
                        .HasColumnName("InspectionEnded");

                    b.Property<string>("InspectionGuide")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("InspectionGuide");

                    b.Property<string>("InspectionReason")
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)")
                        .HasColumnName("InspectionReason");

                    b.Property<DateTime>("InspectionStarted")
                        .HasColumnType("datetime2")
                        .HasColumnName("InspectionStarted");

                    b.Property<string>("WeatherConditions")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("WeatherConditions");
                });

            modelBuilder.Entity("AirWeb.Domain.ComplianceEntities.WorkEntries.Report", b =>
                {
                    b.HasBaseType("AirWeb.Domain.ComplianceEntities.WorkEntries.ComplianceEvent");

                    b.Property<DateOnly?>("DueDate")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("date")
                        .HasColumnName("DueDate");

                    b.Property<bool>("EnforcementNeeded")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bit")
                        .HasColumnName("EnforcementNeeded");

                    b.Property<DateOnly>("ReceivedDate")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("date")
                        .HasColumnName("ReceivedDate");

                    b.Property<bool>("ReportComplete")
                        .HasColumnType("bit");

                    b.Property<string>("ReportingPeriodComment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateOnly?>("ReportingPeriodEnd")
                        .HasColumnType("date");

                    b.Property<DateOnly>("ReportingPeriodStart")
                        .HasColumnType("date");

                    b.Property<string>("ReportingPeriodType")
                        .IsRequired()
                        .HasMaxLength(29)
                        .HasColumnType("nvarchar(29)");

                    b.Property<bool>("ReportsDeviations")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bit")
                        .HasColumnName("ReportsDeviations");

                    b.Property<DateOnly?>("SentDate")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("date")
                        .HasColumnName("SentDate");

                    b.HasDiscriminator().HasValue("Report");
                });

            modelBuilder.Entity("AirWeb.Domain.ComplianceEntities.WorkEntries.SourceTestReview", b =>
                {
                    b.HasBaseType("AirWeb.Domain.ComplianceEntities.WorkEntries.ComplianceEvent");

                    b.Property<DateOnly?>("DueDate")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("date")
                        .HasColumnName("DueDate");

                    b.Property<bool>("FollowupTaken")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bit")
                        .HasColumnName("FollowupTaken");

                    b.Property<DateOnly>("ReceivedByComplianceDate")
                        .HasColumnType("date");

                    b.Property<int>("ReferenceNumber")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("SourceTestReview");
                });

            modelBuilder.Entity("AirWeb.Domain.ComplianceEntities.WorkEntries.Inspection", b =>
                {
                    b.HasBaseType("AirWeb.Domain.ComplianceEntities.WorkEntries.BaseInspection");

                    b.HasDiscriminator().HasValue("Inspection");
                });

            modelBuilder.Entity("AirWeb.Domain.ComplianceEntities.WorkEntries.RmpInspection", b =>
                {
                    b.HasBaseType("AirWeb.Domain.ComplianceEntities.WorkEntries.BaseInspection");

                    b.HasDiscriminator().HasValue("RmpInspection");
                });

            modelBuilder.Entity("AirWeb.Domain.AuditPoints.AuditPoint", b =>
                {
                    b.HasOne("AirWeb.Domain.Identity.ApplicationUser", "Who")
                        .WithMany()
                        .HasForeignKey("WhoId");

                    b.Navigation("Who");
                });

            modelBuilder.Entity("AirWeb.Domain.Comments.Comment", b =>
                {
                    b.HasOne("AirWeb.Domain.Identity.ApplicationUser", "CommentBy")
                        .WithMany()
                        .HasForeignKey("CommentById");

                    b.Navigation("CommentBy");
                });

            modelBuilder.Entity("AirWeb.Domain.ComplianceEntities.Fces.Fce", b =>
                {
                    b.HasOne("AirWeb.Domain.Identity.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("AirWeb.Domain.Identity.ApplicationUser", "ReviewedBy")
                        .WithMany()
                        .HasForeignKey("ReviewedById");

                    b.Navigation("DeletedBy");

                    b.Navigation("ReviewedBy");
                });

            modelBuilder.Entity("AirWeb.Domain.ComplianceEntities.WorkEntries.WorkEntry", b =>
                {
                    b.HasOne("AirWeb.Domain.Identity.ApplicationUser", "ClosedBy")
                        .WithMany()
                        .HasForeignKey("ClosedById");

                    b.HasOne("AirWeb.Domain.Identity.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("AirWeb.Domain.Identity.ApplicationUser", "ResponsibleStaff")
                        .WithMany()
                        .HasForeignKey("ResponsibleStaffId");

                    b.Navigation("ClosedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ResponsibleStaff");
                });

            modelBuilder.Entity("AirWeb.Domain.EnforcementEntities.CaseFiles.CaseFile", b =>
                {
                    b.HasOne("AirWeb.Domain.Identity.ApplicationUser", "ClosedBy")
                        .WithMany()
                        .HasForeignKey("ClosedById");

                    b.HasOne("AirWeb.Domain.Identity.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("AirWeb.Domain.Identity.ApplicationUser", "ResponsibleStaff")
                        .WithMany()
                        .HasForeignKey("ResponsibleStaffId");

                    b.HasOne("AirWeb.Domain.EnforcementEntities.ViolationTypes.ViolationType", "ViolationType")
                        .WithMany()
                        .HasForeignKey("ViolationTypeCode");

                    b.Navigation("ClosedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ResponsibleStaff");

                    b.Navigation("ViolationType");
                });

            modelBuilder.Entity("AirWeb.Domain.EnforcementEntities.EnforcementActions.ActionProperties.EnforcementActionReview", b =>
                {
                    b.HasOne("AirWeb.Domain.EnforcementEntities.EnforcementActions.EnforcementAction", "EnforcementAction")
                        .WithMany("Reviews")
                        .HasForeignKey("EnforcementActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirWeb.Domain.Identity.ApplicationUser", "RequestedBy")
                        .WithMany()
                        .HasForeignKey("RequestedById");

                    b.HasOne("AirWeb.Domain.Identity.ApplicationUser", "RequestedOf")
                        .WithMany()
                        .HasForeignKey("RequestedOfId");

                    b.HasOne("AirWeb.Domain.Identity.ApplicationUser", "ReviewedBy")
                        .WithMany()
                        .HasForeignKey("ReviewedById");

                    b.Navigation("EnforcementAction");

                    b.Navigation("RequestedBy");

                    b.Navigation("RequestedOf");

                    b.Navigation("ReviewedBy");
                });

            modelBuilder.Entity("AirWeb.Domain.EnforcementEntities.EnforcementActions.ActionProperties.StipulatedPenalty", b =>
                {
                    b.HasOne("AirWeb.Domain.EnforcementEntities.EnforcementActions.ConsentOrder", "ConsentOrder")
                        .WithMany("StipulatedPenalties")
                        .HasForeignKey("ConsentOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConsentOrder");
                });

            modelBuilder.Entity("AirWeb.Domain.EnforcementEntities.EnforcementActions.EnforcementAction", b =>
                {
                    b.HasOne("AirWeb.Domain.Identity.ApplicationUser", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById");

                    b.HasOne("AirWeb.Domain.EnforcementEntities.CaseFiles.CaseFile", "CaseFile")
                        .WithMany("EnforcementActions")
                        .HasForeignKey("CaseFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirWeb.Domain.Identity.ApplicationUser", "CurrentReviewer")
                        .WithMany()
                        .HasForeignKey("CurrentReviewerId");

                    b.HasOne("AirWeb.Domain.Identity.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.Navigation("ApprovedBy");

                    b.Navigation("CaseFile");

                    b.Navigation("CurrentReviewer");

                    b.Navigation("DeletedBy");
                });

            modelBuilder.Entity("AirWeb.Domain.Identity.ApplicationUser", b =>
                {
                    b.HasOne("AirWeb.Domain.Lookups.Offices.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId");

                    b.Navigation("Office");
                });

            modelBuilder.Entity("CaseFileComplianceEvents", b =>
                {
                    b.HasOne("AirWeb.Domain.EnforcementEntities.CaseFiles.CaseFile", null)
                        .WithMany()
                        .HasForeignKey("CaseFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirWeb.Domain.ComplianceEntities.WorkEntries.ComplianceEvent", null)
                        .WithMany()
                        .HasForeignKey("ComplianceEventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AirWeb.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AirWeb.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirWeb.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AirWeb.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AirWeb.Domain.AuditPoints.CaseFileAuditPoint", b =>
                {
                    b.HasOne("AirWeb.Domain.EnforcementEntities.CaseFiles.CaseFile", null)
                        .WithMany("AuditPoints")
                        .HasForeignKey("CaseFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AirWeb.Domain.AuditPoints.FceAuditPoint", b =>
                {
                    b.HasOne("AirWeb.Domain.ComplianceEntities.Fces.Fce", null)
                        .WithMany("AuditPoints")
                        .HasForeignKey("FceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AirWeb.Domain.AuditPoints.WorkEntryAuditPoint", b =>
                {
                    b.HasOne("AirWeb.Domain.ComplianceEntities.WorkEntries.WorkEntry", null)
                        .WithMany("AuditPoints")
                        .HasForeignKey("WorkEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AirWeb.Domain.ComplianceEntities.Fces.FceComment", b =>
                {
                    b.HasOne("AirWeb.Domain.ComplianceEntities.Fces.Fce", null)
                        .WithMany("Comments")
                        .HasForeignKey("FceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AirWeb.Domain.ComplianceEntities.WorkEntries.WorkEntryComment", b =>
                {
                    b.HasOne("AirWeb.Domain.ComplianceEntities.WorkEntries.WorkEntry", null)
                        .WithMany("Comments")
                        .HasForeignKey("WorkEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AirWeb.Domain.EnforcementEntities.CaseFiles.CaseFileComment", b =>
                {
                    b.HasOne("AirWeb.Domain.EnforcementEntities.CaseFiles.CaseFile", null)
                        .WithMany("Comments")
                        .HasForeignKey("CaseFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AirWeb.Domain.ComplianceEntities.WorkEntries.Notification", b =>
                {
                    b.HasOne("AirWeb.Domain.Lookups.NotificationTypes.NotificationType", "NotificationType")
                        .WithMany()
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationType");
                });

            modelBuilder.Entity("AirWeb.Domain.ComplianceEntities.Fces.Fce", b =>
                {
                    b.Navigation("AuditPoints");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("AirWeb.Domain.ComplianceEntities.WorkEntries.WorkEntry", b =>
                {
                    b.Navigation("AuditPoints");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("AirWeb.Domain.EnforcementEntities.CaseFiles.CaseFile", b =>
                {
                    b.Navigation("AuditPoints");

                    b.Navigation("Comments");

                    b.Navigation("EnforcementActions");
                });

            modelBuilder.Entity("AirWeb.Domain.EnforcementEntities.EnforcementActions.EnforcementAction", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("AirWeb.Domain.EnforcementEntities.EnforcementActions.ConsentOrder", b =>
                {
                    b.Navigation("StipulatedPenalties");
                });
#pragma warning restore 612, 618
        }
    }
}
